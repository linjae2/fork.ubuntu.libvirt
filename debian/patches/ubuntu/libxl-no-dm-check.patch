Description: libxl: Stop calling emulator to identify device-model
 In order to decide whether the provided qemu is a upstream version or
 the one that Xen was providing in the past the libxl driver tries to 
 call it with "-help" and checks the result for some keywords.
 Given we no longer ship the old qemu-dm and because it causes the
 auto-tests to fail, we just always pretend its the upstream qemu.
Forwarded: no
Author: Stefan Bader <stefan.bader@canonical.com>

Index: libvirt/src/libxl/libxl_conf.c
===================================================================
--- libvirt.orig/src/libxl/libxl_conf.c
+++ libvirt/src/libxl/libxl_conf.c
@@ -908,31 +908,14 @@ libxlDiskSetDiscard(libxl_device_disk *x
 #define LIBXL_QEMU_DM_STR  "Options specific to the Xen version:"
 
 int
-libxlDomainGetEmulatorType(const virDomainDef *def)
+libxlDomainGetEmulatorType(const virDomainDef *def ATTRIBUTE_UNUSED)
 {
-    int ret = LIBXL_DEVICE_MODEL_VERSION_QEMU_XEN;
-    virCommandPtr cmd = NULL;
-    char *output = NULL;
-
-    if (def->os.type == VIR_DOMAIN_OSTYPE_HVM) {
-        if (def->emulator) {
-            cmd = virCommandNew(def->emulator);
-
-            virCommandAddArgList(cmd, "-help", NULL);
-            virCommandSetOutputBuffer(cmd, &output);
-
-            if (virCommandRun(cmd, NULL) < 0)
-                goto cleanup;
-
-            if (strstr(output, LIBXL_QEMU_DM_STR))
-                ret = LIBXL_DEVICE_MODEL_VERSION_QEMU_XEN_TRADITIONAL;
-        }
-    }
-
- cleanup:
-    VIR_FREE(output);
-    virCommandFree(cmd);
-    return ret;
+	/*
+	 * We do not ship any qemu-dm anymore, so there is no use in the
+	 * callout and it also breaks the test (at least since 1.3.1).
+	 * So just return with the new device-model.
+	 */
+	return LIBXL_DEVICE_MODEL_VERSION_QEMU_XEN;
 }
 
 static char *
