Description: fix tap interface mac addresses
Author: Flavio Leitner
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/qemu-kvm/+bug/584048
Origin: https://bugzilla.redhat.com/attachment.cgi?id=433370
 https://www.redhat.com/archives/libvir-list/2010-July/msg00450.html
Index: libvirt-0.7.5/src/qemu/qemu_conf.c
===================================================================
--- libvirt-0.7.5.orig/src/qemu/qemu_conf.c	2011-04-20 08:16:45.418861390 -0500
+++ libvirt-0.7.5/src/qemu/qemu_conf.c	2011-04-20 08:16:45.858861390 -0500
@@ -1379,6 +1379,7 @@
     int tapfd = -1;
     int vnet_hdr = 0;
     int template_ifname = 0;
+    unsigned char tapmac[VIR_MAC_BUFLEN];
 
     if (net->type == VIR_DOMAIN_NET_TYPE_NETWORK) {
         virNetworkPtr network = virNetworkLookupByName(conn,
@@ -1425,8 +1426,14 @@
         net->model && STREQ(net->model, "virtio"))
         vnet_hdr = 1;
 
-    if ((err = brAddTap(driver->brctl, brname,
-                        &net->ifname, vnet_hdr, &tapfd))) {
+    memcpy(tapmac, net->mac, VIR_MAC_BUFLEN);
+    tapmac[0] = 0xFE; /* Discourage bridge from using TAP dev MAC */
+    if ((err = brAddTap(driver->brctl,
+                        brname,
+                        &net->ifname,
+                        tapmac,
+                        vnet_hdr,
+                        &tapfd))) {
         if (errno == ENOTSUP) {
             /* In this particular case, give a better diagnostic. */
             qemudReportError(conn, NULL, NULL, VIR_ERR_INTERNAL_ERROR,
Index: libvirt-0.7.5/src/uml/uml_conf.c
===================================================================
--- libvirt-0.7.5.orig/src/uml/uml_conf.c	2009-12-22 03:37:57.000000000 -0600
+++ libvirt-0.7.5/src/uml/uml_conf.c	2011-04-20 08:16:45.858861390 -0500
@@ -108,6 +108,7 @@
     int tapfd = -1;
     int template_ifname = 0;
     int err;
+    unsigned char tapmac[VIR_MAC_BUFLEN];
 
     if ((err = brInit(&brctl))) {
         virReportSystemError(conn, err, "%s",
@@ -125,8 +126,14 @@
         template_ifname = 1;
     }
 
-    if ((err = brAddTap(brctl, bridge,
-                        &net->ifname, BR_TAP_PERSIST, &tapfd))) {
+    memcpy(tapmac, net->mac, VIR_MAC_BUFLEN);
+    tapmac[0] = 0xFE; /* Discourage bridge from using TAP dev MAC */
+    if ((err = brAddTap(brctl,
+                        bridge,
+                        &net->ifname,
+                        tapmac,
+                        0,
+                        &tapfd))) {
         if (errno == ENOTSUP) {
             /* In this particular case, give a better diagnostic. */
             umlReportError(conn, NULL, NULL, VIR_ERR_INTERNAL_ERROR,
Index: libvirt-0.7.5/src/util/bridge.c
===================================================================
--- libvirt-0.7.5.orig/src/util/bridge.c	2011-04-20 08:16:44.148861390 -0500
+++ libvirt-0.7.5/src/util/bridge.c	2011-04-20 08:16:45.898861390 -0500
@@ -288,6 +288,38 @@
 #endif
 
 /**
+ * ifSetInterfaceMac:
+ * @ctl: bridge control pointer
+ * @ifname: interface name to set MTU for
+ * @macaddr: MAC address (VIR_MAC_BUFLEN in size)
+ *
+ * This function sets the @macaddr for a given interface @ifname. This
+ * gets rid of the kernel's automatically assigned random MAC.
+ *
+ * Returns 0 in case of success or an errno code in case of failure.
+ */
+static int ifSetInterfaceMac(brControl *ctl, const char *ifname,
+                             const unsigned char *macaddr)
+{
+    struct ifreq ifr;
+
+    if (!ctl || !ifname)
+        return EINVAL;
+
+    memset(&ifr, 0, sizeof(struct ifreq));
+    if (virStrcpyStatic(ifr.ifr_name, ifname) == NULL)
+        return EINVAL;
+
+    /* To fill ifr.ifr_hdaddr.sa_family field */
+    if (ioctl(ctl->fd, SIOCGIFHWADDR, &ifr) != 0)
+        return errno;
+
+    memcpy(ifr.ifr_hwaddr.sa_data, macaddr, VIR_MAC_BUFLEN);
+
+    return ioctl(ctl->fd, SIOCSIFHWADDR, &ifr) == 0 ? 0 : errno;
+}
+
+/**
  * ifGetMtu
  * @ctl: bridge control pointer
  * @ifname: interface name get MTU for
@@ -433,6 +465,7 @@
  * @ctl: bridge control pointer
  * @bridge: the bridge name
  * @ifname: the interface name (or name template)
+ * @macaddr: desired MAC address (VIR_MAC_BUFLEN long)
  * @vnet_hdr: whether to try enabling IFF_VNET_HDR
  * @tapfd: file descriptor return value for the new tap device
  *
@@ -450,6 +483,7 @@
 brAddTap(brControl *ctl,
          const char *bridge,
          char **ifname,
+         const unsigned char *macaddr,
          int vnet_hdr,
          int *tapfd)
 {
@@ -481,6 +515,14 @@
     if (ioctl(fd, TUNSETIFF, &ifr) < 0)
         goto error;
 
+    /* We need to set the interface MAC before adding it
+     * to the bridge, because the bridge assumes the lowest
+     * MAC of all enslaved interfaces & we don't want it
+     * seeing the kernel allocate random MAC for the TAP
+     * device before we set our static MAC.
+     */
+    if ((errno = ifSetInterfaceMac(ctl, ifr.ifr_name, macaddr)))
+        goto error;
     /* We need to set the interface MTU before adding it
      * to the bridge, because the bridge will have its
      * MTU adjusted automatically when we add the new interface.
Index: libvirt-0.7.5/src/util/bridge.h
===================================================================
--- libvirt-0.7.5.orig/src/util/bridge.h	2009-12-22 03:37:57.000000000 -0600
+++ libvirt-0.7.5/src/util/bridge.h	2011-04-20 08:16:45.918861390 -0500
@@ -68,7 +68,8 @@
 int     brAddTap                (brControl *ctl,
                                  const char *bridge,
                                  char **ifname,
-                                 int features,
+                                 const unsigned char *macaddr,
+                                 int vnet_hdr,
                                  int *tapfd);
 
 int     brDeleteTap             (brControl *ctl,
