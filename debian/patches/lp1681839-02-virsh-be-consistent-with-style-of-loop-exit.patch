From 15dee2ef24f2f19f6dcd30d997b81c8a14582361 Mon Sep 17 00:00:00 2001
From: Michael Chapman <mike@very.puzzling.org>
Date: Wed, 27 Jan 2016 13:24:52 +1100
Subject: [PATCH] virsh: be consistent with style of loop exit

When waiting for a block job, the various statuses (COMPLETED, READY,
CANCELED, etc.) should all be treated consistently by having the loop be
exited with "break". Use "goto cleanup" for the error cases only, when
no block job status is available.

Signed-off-by: Michael Chapman <mike@very.puzzling.org>

Origin: upstream, https://libvirt.org/git/?p=libvirt.git;a=commit;h=15dee2ef24f2f19f6dcd30d997b81c8a14582361
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1681839
Applied-Upstream: 1.3.2
Last-Update: 2019-11-07

---
 tools/virsh-domain.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

Index: libvirt-1.3.1/tools/virsh-domain.c
===================================================================
--- libvirt-1.3.1.orig/tools/virsh-domain.c
+++ libvirt-1.3.1/tools/virsh-domain.c
@@ -1876,21 +1876,23 @@ virshBlockJobWait(virshBlockJobWaitDataP
          * the waiting loop */
         if ((data->cb_id >= 0 || data->cb_id2 >= 0) && data->status != -1) {
             ret = data->status;
-            goto cleanup;
+            break;
         }
 
         /* since virsh can't guarantee that the path provided by the user will
          * later be matched in the event we will need to keep the fallback
          * approach and claim success if the block job finishes or vanishes. */
-        if (result == 0)
+        if (result == 0) {
+            ret = VIR_DOMAIN_BLOCK_JOB_COMPLETED;
             break;
+        }
 
         /* for two-phase jobs we will try to wait in the synchronized phase
          * for event arrival since 100% completion doesn't necessarily mean that
          * the block job has finished and can be terminated with success */
         if (info.end == info.cur && --retries == 0) {
             ret = VIR_DOMAIN_BLOCK_JOB_READY;
-            goto cleanup;
+            break;
         }
 
         if (data->verbose && (info.cur != last.cur || info.end != last.end))
@@ -1911,21 +1913,19 @@ virshBlockJobWait(virshBlockJobWaitDataP
             }
 
             ret = VIR_DOMAIN_BLOCK_JOB_CANCELED;
-            goto cleanup;
+            break;
         }
 
         usleep(500 * 1000);
     }
 
-    ret = VIR_DOMAIN_BLOCK_JOB_COMPLETED;
-
- cleanup:
     /* print 100% completed */
     if (data->verbose &&
         (ret == VIR_DOMAIN_BLOCK_JOB_COMPLETED ||
          ret == VIR_DOMAIN_BLOCK_JOB_READY))
         virshPrintJobProgress(data->job_name, 0, 1);
 
+ cleanup:
     sigaction(SIGINT, &old_sig_action, NULL);
     return ret;
 }
