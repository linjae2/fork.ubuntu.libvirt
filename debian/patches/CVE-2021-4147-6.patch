Backport of:

From a7a03324d86e111f81687b5315b8f296dde84340 Mon Sep 17 00:00:00 2001
From: Jim Fehlig <jfehlig@suse.com>
Date: Thu, 18 Nov 2021 12:03:20 -0700
Subject: [PATCH] libxl: Protect access to libxlLogger files hash table
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The hash table of log file objects in libxlLogger is not protected against
concurrent access. It is possible for one thread to remove an entry while
another is updating it. Add a mutex to the libxlLogger object and lock it
when accessing the files hash table.

Signed-off-by: Jim Fehlig <jfehlig@suse.com>
Reviewed-by: Daniel P. Berrangé <berrange@redhat.com>
Reviewed-by: Ján Tomko <jtomko@redhat.com>
---
 src/libxl/libxl_logger.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

--- a/src/libxl/libxl_logger.c
+++ b/src/libxl/libxl_logger.c
@@ -32,6 +32,7 @@
 #include "util/virfile.h"
 #include "util/virhash.h"
 #include "util/virstring.h"
+#include "util/virthread.h"
 #include "util/virtime.h"
 
 #define VIR_FROM_THIS VIR_FROM_LIBXL
@@ -47,6 +48,7 @@ struct xentoollog_logger_libvirt {
 
     /* map storing the opened fds: "domid" -> FILE* */
     virHashTablePtr files;
+    virMutex tableLock;
     FILE *defaultLogFile;
 };
 
@@ -91,7 +93,9 @@ libvirt_vmessage(xentoollog_logger *logg
         start = start + 9;
         *end = '\0';
 
+        virMutexLock(&lg->tableLock);
         domainLogFile = virHashLookup(lg->files, start);
+        virMutexUnlock(&lg->tableLock);
         if (domainLogFile)
             logFile = domainLogFile;
 
@@ -165,6 +169,11 @@ libxlLoggerNew(const char *logDir, virLo
     if ((logger.defaultLogFile = fopen(path, "a")) == NULL)
         goto cleanup;
 
+    if (virMutexInit(&logger.tableLock) < 0) {
+        VIR_FORCE_FCLOSE(logger.defaultLogFile);
+        goto cleanup;
+    }
+
     if ((logger.files = virHashCreate(3, libxlLoggerFileFree)) == NULL)
         goto cleanup;
 
@@ -182,6 +191,7 @@ libxlLoggerFree(libxlLoggerPtr logger)
     if (logger->defaultLogFile)
         VIR_FORCE_FCLOSE(logger->defaultLogFile);
     virHashFree(logger->files);
+    virMutexDestroy(&logger->tableLock);
     xtl_logger_destroy(xtl_logger);
 }
 
@@ -205,7 +215,9 @@ libxlLoggerOpenFile(libxlLoggerPtr logge
                  path, virStrerror(errno, ebuf, sizeof(ebuf)));
         goto cleanup;
     }
+    virMutexLock(&logger->tableLock);
     ignore_value(virHashAddEntry(logger->files, domidstr, logFile));
+    virMutexUnlock(&logger->tableLock);
 
     /* domain_config is non NULL only when starting a new domain */
     if (domain_config) {
@@ -225,7 +237,9 @@ libxlLoggerCloseFile(libxlLoggerPtr logg
     if (virAsprintf(&domidstr, "%d", id) < 0)
         return;
 
+    virMutexLock(&logger->tableLock);
     ignore_value(virHashRemoveEntry(logger->files, domidstr));
+    virMutexUnlock(&logger->tableLock);
 
     VIR_FREE(domidstr);
 }
