#!/bin/sh

set -e

# summary of how this script can be called:
#
#   * <new-preinst> `install'
#   * <new-preinst> `install' <old-version> <new-version>
#   * <new-preinst> `upgrade' <old-version> <new-version>
#   * <old-preinst> `abort-upgrade' <new-version>
#
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package

prepare_conffile_transfer() {
    local conffile="$1"
    local firstver="$2"
    local lastver="$3"
    local pkgfrom="$4"
    local pkgto="$5"

    if [ "$6" != "--" ]; then
        echo "prepare_conffile_transfer called with the wrong number of arguments" >&2
        return 1
    fi
    for _ in $(seq 1 6); do
        shift
    done

    # If we're installing from scratch or upgrading from a new enough version
    # of the package, then no transfer needs to happen and we can stop here
    if [ -z "$2" ] || dpkg --compare-versions -- "$2" gt "$lastver"; then
        return 0
    fi

    # Depending on the current state of the conffile, we need to perform different
    # steps to transfer it. Moving the conffile to a different location depending
    # on its current state achieves two goals: dpkg will see the conffile is no
    # longer present on disk after $pkgfrom has been upgraded, and so it will no
    # longer associate it with that package (not even as an obsolete conffile);
    # more importanly, $pkgto's postinst, where the transfer process is completed,
    # will be able to figure out the original state of the conffile and make sure
    # it is restored

    if [ -e "$conffile" ]; then
        expected=$(dpkg-query --showformat='${Conffiles}\n' --show "$pkgfrom" | grep -E "^ $conffile " | sed -E 's/^.* ([0-9a-f]+)$/\1/g')
        actual=$(md5sum "$conffile" 2>/dev/null | sed -E 's/^([0-9a-f]+) .*$/\1/g')

        if [ -n "$actual" ] && [ "$actual" = "$expected" ]; then
            rm -f "$conffile"
            return 0
        fi

        echo "Preparing transfer of config file $conffile (from $pkgfrom to $pkgto) ..."
        mv -f "$conffile" "$conffile.dpkg-transfer"
        return 0
    fi

    if [ -n "$2" ] && dpkg --compare-versions -- "$2" gt "$firstver"; then
        # If we are performing an upgrade from a version that's newer than the
        # one which originally introduced the conffile ($firstver), we expect
        # it to be present on disk; if that's not the case, that means that
        # the admin  must have explicitly deleted it and we should preserve
        # this local modification
        touch "$conffile.dpkg-disappear"
        return 0
    fi
}

SANLOCK_TO_DAEMON_PLUGIN_SANLOCK="
    /etc/cron.weekly/libvirt-sanlock
"

case "$1" in
    install|upgrade)
        for conf in $SANLOCK_TO_DAEMON_PLUGIN_SANLOCK; do
            prepare_conffile_transfer \
                "$conf" \
                "6.0.0-0~" \
                "10.6.0-2~" \
                "libvirt-sanlock" \
                "libvirt-daemon-plugin-sanlock" \
                -- \
                "$@"
        done
    ;;

    abort-upgrade)
    ;;

    *)
        echo "preinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

#DEBHELPER#

exit 0
